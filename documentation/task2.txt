 Techniques for preparing and deploying an Angular application to a server running remotely£º
1. The simple way is to copy the development environment to the server.
  It's not optimized and it won't be fast for users.

2. rollup:
   advantage:Rollup uses a process called Tree Shaking, resulting in a highly optimized bundle
             Configure the bundle with minimal code written in ES2015
             Development environment is close to mirroring production environment 
   disadvantage:There Are Some Disadvantages

   ngModule cannot be lazy loaded out of the box

   bundling details:https://www.codementor.io/stevebelovarich/use-rollup-to-build-angular-2-web-apps-du1089cq5

Shortage of documentation
3. Web pack:
    advantage:
                    a.Code splitting: Based on the code size, it helps modularize the code chunks of code and loads these modules as and when needed.
                       You can define the split points on your code, based on which the code chunks will be used. Thus, it helps in faster page load and performance improvement.
  
                    b:Loaders: As in the earlier-mentioned image, in the left-hand side, you can see that there are various other formats such as coffescripts/jsx instead of JavaScript 
                       and .less instead of .css. Thus, these loaders (npm packages) are used to convert these other formats into the accepted standardized formats, which makes the life 
  of the developers easier. 

   Since webpack already packed with angular cil package. We can just install npm and install angular cil
   a. type in: npm install -g @angular/cli
   b.create a new project by typeing :ng new my-app(app name can be changed)
   c.Go to the project directory and launch the server:cd my-app
            ng serve --open
   d.then type in : npm run build 
   e. look for bundled files in one document called dist(property can be edited in ../src/angular.cil.json and package.json )
   f. there are several bundles 
       inline.bundle.js

       This is a webpack loader. A tiny file with Webpack utilities that are needed when loading other files.

       Eventually this will be written inside the index.html file itself and not being generated as a separate file at all.


       vendor.bundle.js
       
       It includes the Angular libraries with little or no modification. This is to speed up the build process.
       The typical Angular approach though is to merge them into the main bundle, and when doing so, run Webpack tree-shaking,
       which removes any EcmaScript / TypeScript modules that were never imported from any other modules in your app and its imports.
       This means the final bundle is much smaller. For example, when running Ahead of Time compiler (AoT), the Angular Compiler gets tree-shaked away.

       You can explicitly control generating a separate vendor bundle or not by setting the argument --vendor-chunk.

       main.bundle.js

       Your own code, and anything else you imported etc, as explained in previous point.

4. systemJS:
SystemJS is not a bundler. it is user for loading the few files you need from the web instead of load everything from node_modules folder.

conducting details:https://angular.io/docs/ts/latest/guide/deployment.html#!#overview




Deployment:


1. install node and npm (brew install node)
Ensure you're running the latest versions Node v4.x.x+ (or v5.x.x) and NPM 3.x.x+


2.  webpack (npm install --global webpack)
webpack-dev-server (npm install --global webpack-dev-server)
karma (npm install --global karma-cli)
protractor (npm install --global protractor)
typescript (npm install --global typescript)
Installing

3. fork this repo
clone your fork
npm install webpack-dev-server rimraf webpack -g to install required global dependencies
npm install to install all dependencies or yarn
npm run server to start the dev server in another tab
4. Running the app
After you have installed all dependencies you can now run the app. Run npm run server to start a local
 server using webpack-dev-server which will watch, build (in-memory), and reload for you. The port will 
be displayed to you as http://0.0.0.0:3000 (or if you prefer IPv6, if you're using express server, then it's http://[::1]:3000/).
(ref: https://github.com/AngularClass/angular2-webpack-starter#running-the-app)